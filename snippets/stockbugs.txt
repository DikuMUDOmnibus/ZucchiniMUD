
--------
From: Oliver Jowett <oliver@sa-search.massey.ac.nz>
Subject: page_to_char patch

This patch modifies page_to_char to concatenate strings sent while another
page_to_char is pending, rather that aborting the first, and also fixes a
memory leak.  This affects (at least) IMC, which calls page_to_char
asynchronously. 

(untested and hand-edited patch follows - sorry 'bout that)

Oliver


--- old-src/comm.c	Thu Mar 20 16:56:28 1997
+++ src/comm.c	Fri Mar 21 12:51:01 1997
@@ -2330,10 +2341,26 @@
 #if defined(macintosh)
 	send_to_char(txt,ch);
 #else
-    ch->desc->showstr_head = alloc_mem(strlen(txt) + 1);
-    strcpy(ch->desc->showstr_head,txt);
-    ch->desc->showstr_point = ch->desc->showstr_head;
-    show_string(ch->desc,"");
+    if (ch->desc->showstr_head &&
+	(strlen(txt)+strlen(ch->desc->showstr_head)+1) < 32000)
+    {
+      char *temp=alloc_mem(strlen(txt) + strlen(ch->desc->showstr_head) + 1);
+      strcpy(temp, ch->desc->showstr_head);
+      strcat(temp, txt);
+      ch->desc->showstr_point = temp + 
+	(ch->desc->showstr_point - ch->desc->showstr_head);
+      free_mem(ch->desc->showstr_head, strlen(ch->desc->showstr_head) + 1);
+      ch->desc->showstr_head=temp;
+    }
+    else
+    {
+      if (ch->desc->showstr_head)
+	free_mem(ch->desc->showstr_head, strlen(ch->desc->showstr_head)+1);
+      ch->desc->showstr_head = alloc_mem(strlen(txt) + 1);
+      strcpy(ch->desc->showstr_head,txt);
+      ch->desc->showstr_point = ch->desc->showstr_head;
+      show_string(ch->desc,"");
+    }
 #endif
 }

From: Hieronymous <hiero@netusa1.net>
Subject: Alloc_mem BUG (Merc Diku 2.2)

Hello, everyone -- 

About a month and a half ago, one of the Implementors on our MUD sent the
following message to this list with questions about the cause of this sort
of bug.  The only suggestion anyone had was that it might have to do with
color code.

Anyway, after a lot of grief, we have puzzled out the cause of this bug and
thought we'd first advise everyone on here in case you have problems with
this at some point and second ask a couple questions as to what might be
the best way to actually go about fixing the problem.

We had started out thinking that perhaps the problem was generated
somewhere in send_to_char or page_to_char, the latter of which I understand
is not in stock Merc Diku 2.2 code.  One thing that troubled us was the
reason that the bug always was for 64000, not for any other number. 
Eventually, we found that checks in send_to_char and page_to_char were not
stopping the bug (which only caused crashes sporadically).  Finally, it
became clear that crashes occurred when a couple characters were attacking
mobs that were self-generating with area effect spells (say, 40+ of those
mobs), particularly those triggered with do_brandish.  An investigation of
do_brandish revealed the use of the act function in comm.c, which in turn
utilized write_to_buffer.  A quick test using those staves on a good-sized
number of guardian vampires (who use the gate spell) corroborated our
suspicions that these battles were causing the problem.  The MUD crashed
with the same bug message after the eighth or ninth brandish.

Now, we are not so confident with write_to_buffer, as we aren't clear on
the purpose of certain of the variables used there (outtop, outsize, etc.).
 Is it possible someone could explain the importance/use of each of the
variables used in write_to_buffer? 

Also, I thought I'd run our temporary bug fix by you folks and see if any
of you have suggestions for improving it or reasons why we should not use
it.

In the final while loop we have the following:

while ( d->outtop + length >= d->outsize )
{
     char *outbuf;

/* new code begins here */
     if ( ( 2 * d->outsize) > 63000 )
     {
        bug("Write_to_buffer:  outsize too large:  %d", d->outsize);
        return;
     }
/* end of new code */

     outbuf   = alloc_mem( 2 * d->outsize );
  etc....

This code *seems* to be working well, except for one problem.  For each
message of damage to the various mobiles, a bug message is generated.  This
means that for every brandish (after the 8th or 9th one), there are 40+ bug
messages, which of course quickly makes for a large log file, at least if
the battle goes on for a while.  Does anyone have a suggestion that could
possibly generate a single bug message?  
Also, is there any reason *not* to fix the problem this way?  Finally, is
there any need to reinitialize d->outsize?  Or is that not necessary?

Ok, I think that is all the questions about this code that we have at this
time.  In advance, thanks for your help, and we hope our experience with
this can help any others of you who have the same problem at some point. 
:)

Hieronymous
NetherWorld
ruby.telmaron.com 3666
http://www.lexiconn.com/users/mud
--------
From: Garry Turkington <G.Turkington@Queens-Belfast.AC.UK>

On Tue, 3 Mar 1998, Realm Of Eternal Darkness MUD wrote:
> There was a hacker on my server tonight.  One that exploits bugs within
> the mud.  Things like that recent discussion of the combine command, if
> you have the outfit command, which most of you do.  Any char under level 6
> can type it over and over, which will give them a shitload of crap in
> their inventory, then if you remove combine and display you inventory, the
> mud is fucked, 

*sigh*, old bannerboy comes out to play again it seems.  This one has been
around for a while.. removing the combine ability is a fix, removing
do_outfit is another.  If you want to keep both, one of the problems is
that do_outfit doesn't check to see if the char can carry the items it
gives them, so it doesnt take a genius to develop a tintin loop to do the
appropriate action.  Even if you check for this though, they still can
abuse it.  A counter limiting the number of times they can do do_outfit is
another possiblity.

>also, try typing buy 99999999999 (item) at a shop where
> item = anything that the shop sells, this will crash it too.  The sockets

It's always a delicate issue talking about crash bugs on an open list,
but since how to do it has been made public, doing the same to the fix
can't hurt any more.  I won't go into why it works though, in case the
principle gives some assholes ideas to try and find others.
This was a new one on me.  Fix for it is in do_buy, where the sanity check
is performed on the numeric argument to ensure no negatives.. since this
was a problem back in B2, I'm not sure if this code is the fix in B3 or my
own..but it will look darn similar.  Currently it's:

if (number < -1)
{
  act("$n tells you 'Get real!'",keeper, NULL, ch, TO_VICT) ;
  return ;
}

Change the condition to something like:

if (count<-1 || count>100)

The 100 is arbitrary, just make it the upper limit of objects you think
anyone will realistically ever buy at one time.

Hope that helps, unfortunately I have a sinking feeling that since this
previous post Rom's all over the place have been cursed with wits trying
this out.

Garry
--------
From: Mull <andersoh@quoin.cqu.edu.au>

Ok, stop me if you've heard this one.

Ever noticed how you can see through closed doors when you scan on a stock
2.4 rom?
Here's a little fix I learned down Mexico way, goes a little like this...

This is found in scan.c; assuming you have one, open it up and look for the
function below.
The lines marked with + are ones I added. If u see/have any problems with
it, or just want to
tell me how much of drongo I am, drop me a line.

void scan_list(ROOM_INDEX_DATA *scan_room, CHAR_DATA *ch, sh_int depth,
sh_int door)
{
   CHAR_DATA *rch;

   if ( scan_room == NULL )
      return;

+/*
+ * this used to cause a mysterious crash here, finally realized it was
+ * 'door' being -1, and rev_dir seems to have a problem with that...
+ * only acted up when it was done in a room with "extra" exits - Mull
+ */
+   if ( door != -1 && scan_room->exit[rev_dir[door]] != NULL
+   && IS_SET(scan_room->exit[rev_dir[door]]->exit_info,EX_CLOSED) )
+      return;

   for (rch=scan_room->people; rch != NULL; rch=rch->next_in_room)
   {
      if (rch == ch)
         continue;
      if (!IS_NPC(rch) && rch->invis_level > get_trust(ch))
         continue;
      if (can_see(ch, rch))
         scan_char(rch, ch, depth, door);
   }
   return;
}

-----------
From: Thunder <thunder1@fast.net>

>   Does anyone out there have any ideas what needs to be changed in
> act()/act_new() to make it accept NPC's?  I have taken out the checks that
> throw out anyone without a ->desc.  But there must be something else I am
> forgetting.  Any thoughts would be greatly appreciated.
> 

Yeah this is an existing bug in the MOBProg snippet.  Here's what you
need to do:

In comm.c find this section of code in function void act_new(): 

              if ((!IS_NPC(to) && to->desc == NULL )
                   || (IS_NPC(to) && !HAS_TRIGGER(to, TRIG_ACT))
                   || to->position < min_pos)
                       continue; 

And replace it with the following:

 	    /*
	     * MOBProgram fix to allow MOBs to see acts()
	     *   -- Thunder (thunder1@fast.net)
	     */
        if ( (to->desc == NULL
        &&    (!IS_NPC(to) || !HAS_TRIGGER(to, TRIG_ACT)))
        ||   to->position < min_pos )
            continue;

That should cure it. :)

--------
